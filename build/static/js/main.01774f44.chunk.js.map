{"version":3,"sources":["Context.jsx","Theme.js","Pages/Homepage.jsx","util/useForm.js","util/AuthFunctions.js","Pages/LoginForm.jsx","ColorModeSwitcher.js","Components/Nav.jsx","util/GQLQueries.js","Components/LikeButton.jsx","Components/DeleteButton.jsx","Components/PostCard.jsx","Components/FAB.jsx","Pages/Feed.jsx","util/FileUpload.js","Components/FileUploadButton.jsx","Components/AvatarUpload.jsx","Pages/RegisterForm.jsx","Pages/AddPostForm.jsx","Components/ProfileCard.jsx","Pages/Profile.jsx","Components/Comment.jsx","Components/Comments.jsx","Pages/SinglePostPage.jsx","Components/ScrollToTop.jsx","App.js","index.js"],"names":["myContext","createContext","Context","children","useState","userObj","setUserObj","useEffect","axios","get","withCredentials","then","res","data","Provider","value","theme","extendTheme","initialColorMode","useSystemColorMode","fonts","body","heading","mono","Homepage","maxW","as","Box","textAlign","spacing","base","md","py","fontWeight","fontSize","sm","lineHeight","color","direction","align","alignSelf","position","colorScheme","bg","rounded","px","_hover","RouterLink","to","useForm","callback","initalState","values","setValues","handleChange","e","target","name","onSubmit","preventDefault","authLogin","username","password","a","method","url","resTwo","LoginForm","error","setError","errorMsg","setErrorMsg","loginUsername","loginPassword","console","log","window","location","minH","justify","useColorModeValue","mx","mt","boxShadow","p","isInvalid","id","onChange","type","size","onClick","leftIcon","open","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","aria-label","variant","marginLeft","icon","Links","link","AuthLinks","NavLink","onClose","textDecoration","Nav","useDisclosure","isOpen","onOpen","useContext","NavLinkList","w","zIndex","h","alignItems","justifyContent","Close","Hamburger","display","map","Button","cursor","src","photos","title","displayName","href","pb","FETCH_POSTS_QUERY","gql","SUBMIT_COMMENT_MUTATION","LIKE_POST_MUTATION","CREATE_POST_MUTATION","GET_POST_BY_ID","LikeButton","user","post","likeCount","likes","liked","setLiked","find","like","useMutation","variables","postId","likePost","isAttached","style","animation","length","mr","boxSize","borderRadius","objectFit","userPhoto","alt","DELETE_POST_MUTATION","DeleteButton","commentId","cancelRef","useRef","update","proxy","newData","readQuery","query","getPosts","filter","writeQuery","deletePost","motionPreset","leastDestructiveRef","isCentered","ref","ml","PostCard","imageReady","setimageReady","opacity","transition","overflow","mb","pos","onLoad","photoURL","textTransform","fontFamily","letterSpacing","postType","substring","formatDistance","Date","createdAt","addSuffix","commentCount","ArrowForward","FAB","history","bottom","right","push","transform","Feed","useQuery","loading","posts","height","width","marginBottom","columnsCountBreakPoints","350","800","1100","gutter","getImageURl","file","handleImageCompression","compressedImage","fetch","headers","split","imageFile","Blob","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","FileUploadButton","setFileUrl","fileInput","setLoading","handleFileUpload","event","files","imageUrl","accept","multiple","isLoading","current","click","AvatarUpload","fileUrl","RegisterForm","passwordErrorText","setPasswordErrorText","registerPassword","confirmPassword","registerUsername","Promise","r","setTimeout","loginRes","isRequired","errorBorderColor","AddPostForm","fileURL","setFileURL","createPost","liveLink","repoLink","result","onError","err","rows","placeholder","SocialProfileSimple","_after","content","border","flex","_focus","Profile","useParams","filteredPosts","850","Comment","comment","m","Comments","setComment","submitComment","rightIcon","comments","SinglePostPage","setImageReady","getPost","navigate","normalizeUrl","ScrollToTop","pathname","useLocation","scrollTo","App","centerContent","exact","path","component","httpLink","createHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01774f44.chunk.js","sourcesContent":["import { createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nexport const myContext = createContext({});\n\nconst Context = ({ children }) => {\n  const [userObj, setUserObj] = useState();\n  useEffect(() => {\n    axios\n      .get('http://localhost:4000/auth/getuser/', { withCredentials: true })\n      .then(res => {\n        if (res.data) {\n          setUserObj(res.data);\n        }\n      });\n  }, []);\n  return <myContext.Provider value={userObj}>{children}</myContext.Provider>;\n};\n\nexport default Context;\n","import { extendTheme } from '@chakra-ui/react';\n\nexport const theme = extendTheme({\n  initialColorMode: 'light',\n  useSystemColorMode: true,\n  fonts: {\n    body: 'Nunito , sans-serif',\n    heading: 'Montserrat, serif',\n    mono: 'Menlo, monospace',\n  },\n});\n","import { Box, Heading, Container, Text, Button, Stack } from '@chakra-ui/react';\nimport { Link as RouterLink } from 'react-router-dom';\nexport default function Homepage() {\n  return (\n    <>\n      <Container maxW={'3xl'}>\n        <Stack\n          as={Box}\n          textAlign={'center'}\n          spacing={{ base: 8, md: 14 }}\n          py={{ base: 20, md: 36 }}\n        >\n          <Heading\n            fontWeight={600}\n            fontSize={{ base: '2xl', sm: '4xl', md: '6xl' }}\n            lineHeight={'110%'}\n          >\n            Fakr <br />\n            <Text as={'span'} fontSize=\"\" color={'blue.400'}>\n              Find your audience\n            </Text>\n          </Heading>\n          <Text color={'gray.500'}>\n            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Earum\n            distinctio, esse ipsa quod ratione tempora repudiandae dicta\n            nesciunt molestias recusandae. Ea nesciunt quasi delectus autem\n            atque! Amet corporis quibusdam voluptatibus.\n          </Text>\n          <Stack\n            direction={'column'}\n            spacing={3}\n            align={'center'}\n            alignSelf={'center'}\n            position={'relative'}\n          >\n            <Button\n              colorScheme={'blue'}\n              bg={'blue.400'}\n              rounded={'full'}\n              px={6}\n              _hover={{\n                bg: 'blue.500',\n              }}\n              as={RouterLink}\n              to=\"/login\"\n            >\n              Get Started\n            </Button>\n          </Stack>\n        </Stack>\n      </Container>\n    </>\n  );\n}\n","import { useState } from 'react';\n\nexport const useForm = (callback, initalState = {}) => {\n  const [values, setValues] = useState(initalState);\n\n  const handleChange = e => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    callback();\n  };\n\n  return {\n    handleChange,\n    onSubmit,\n    values,\n  };\n};\n","import axios from 'axios';\n\nexport const authLogin = async (username, password) => {\n  const resTwo = await axios({\n    method: 'POST',\n    data: {\n      username,\n      password,\n    },\n    withCredentials: true,\n    url: 'http://localhost:4000/auth/login',\n  });\n  return resTwo.data;\n};\n","import { FaGithub, FaTwitter, FaRegUserCircle } from 'react-icons/fa';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Link,\n  Button,\n  Heading,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nimport { useState } from 'react';\n\nimport { useForm } from '../util/useForm';\nimport { authLogin } from '../util/AuthFunctions';\n\nconst LoginForm = () => {\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const githubLogin = () => {\n    window.open('http://localhost:4000/auth/github', '_self');\n  };\n\n  const twitterLogin = () => {\n    window.open('http://localhost:4000/auth/twitter', '_self');\n  };\n\n  const localLogin = async () => {\n    const res = await authLogin(values.loginUsername, values.loginPassword);\n    console.log(res);\n    if (res === 'success') {\n      setError(false);\n      setErrorMsg('');\n      window.location = '/feed';\n    } else {\n      setError(true);\n      setErrorMsg(res);\n      return;\n    }\n  };\n\n  const { onSubmit, handleChange, values } = useForm(localLogin, {\n    loginUsername: '',\n    loginPassword: '',\n  });\n\n  return (\n    <Flex\n      minH={'92vh'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={8} mx={'auto'} mt={'6'} maxW={'lg'} py={12} px={6}>\n        <Stack align={'center'}>\n          <Heading textAlign=\"center\" fontSize={'4xl'}>\n            Sign in to your account\n          </Heading>\n          <Text fontSize={'lg'} color={'gray.600'}>\n            to enjoy all of our cool <Link color={'blue.400'}>features</Link> ✌️\n          </Text>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          p={6}\n        >\n          <Stack spacing={4}>\n            <FormControl isInvalid={error} id=\"username\">\n              <FormLabel>Username</FormLabel>\n              <Input\n                name=\"loginUsername\"\n                value={values.loginUsername}\n                onChange={handleChange}\n                type=\"text\"\n              />\n              <FormHelperText color=\"crimson\">{errorMsg}</FormHelperText>\n            </FormControl>\n            <FormControl isInvalid={error} id=\"password\">\n              <FormLabel>Password</FormLabel>\n              <Input\n                name=\"loginPassword\"\n                value={values.loginPassword}\n                onChange={handleChange}\n                type=\"password\"\n              />\n              <FormHelperText color=\"crimson\">{errorMsg}</FormHelperText>\n            </FormControl>\n            <Button size=\"lg\" onClick={onSubmit} leftIcon={<FaRegUserCircle />}>\n              Login\n            </Button>\n            <Link\n              as={RouterLink}\n              to=\"/register\"\n              color={'blue.400'}\n              alignSelf=\"center\"\n            >\n              Register for an account\n            </Link>\n            <Button size=\"lg\" onClick={githubLogin} leftIcon={<FaGithub />}>\n              Login with Github\n            </Button>\n            <Button\n              size=\"lg\"\n              colorScheme=\"twitter\"\n              onClick={twitterLogin}\n              leftIcon={<FaTwitter />}\n            >\n              Login with Twitter\n            </Button>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      rounded={'full'}\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import {\n  Box,\n  Flex,\n  Avatar,\n  HStack,\n  Link,\n  IconButton,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  useDisclosure,\n  useColorModeValue,\n  Stack,\n  MenuGroup,\n} from '@chakra-ui/react';\nimport axios from 'axios';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { HamburgerIcon, CloseIcon } from '@chakra-ui/icons';\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\nimport { myContext } from '../Context';\nimport { useContext } from 'react';\n\nimport { FaRegUserCircle, FaCog } from 'react-icons/fa';\nconst Links = [\n  { name: 'Home', link: '/' },\n  { name: 'Login', link: '/login' },\n];\n\nconst AuthLinks = [\n  { name: 'Recent Posts', link: '/feed' },\n  { name: 'Following', link: '/feed' },\n];\n\nconst NavLink = ({ children, onClose }) => (\n  <Link\n    px={2}\n    py={1}\n    rounded={'md'}\n    fontSize=\"md\"\n    _hover={{\n      textDecoration: 'none',\n      bg: useColorModeValue('gray.200', 'gray.700'),\n    }}\n    onClick={onClose}\n    as={RouterLink}\n    to={children.link}\n  >\n    {children.name}\n  </Link>\n);\n\nexport default function Nav() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const userObj = useContext(myContext);\n  const NavLinkList = userObj ? AuthLinks : Links;\n\n  const logout = () => {\n    axios\n      .get('http://localhost:4000/auth/logout', { withCredentials: true })\n      .then(res => {\n        if (res.data) {\n          console.log(res);\n          window.location.href = '/';\n        }\n      });\n  };\n\n  return (\n    <>\n      <Box\n        bg={useColorModeValue('gray.100', 'gray.900')}\n        position=\"fixed\"\n        px={4}\n        w=\"100%\"\n        zIndex=\"10\"\n        boxShadow=\"lg\"\n      >\n        <Flex h={16} alignItems={'center'} justifyContent={'space-between'}>\n          <IconButton\n            size={'md'}\n            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n            aria-label={'Open Menu'}\n            display={{ md: !isOpen ? 'none' : 'inherit' }}\n            onClick={isOpen ? onClose : onOpen}\n          />\n          <HStack spacing={8} alignItems={'center'}>\n            <HStack\n              as={'nav'}\n              spacing={4}\n              display={{ base: 'none', md: 'flex' }}\n            >\n              {NavLinkList.map(link => (\n                <NavLink key={link}>{link}</NavLink>\n              ))}\n            </HStack>\n          </HStack>\n\n          <HStack>\n            <ColorModeSwitcher />\n            {userObj && (\n              <Menu>\n                <MenuButton\n                  as={Button}\n                  rounded={'full'}\n                  variant={'link'}\n                  cursor={'pointer'}\n                >\n                  <Avatar size={'sm'} src={userObj.photos} />\n                </MenuButton>\n                <MenuList fontSize=\"lg\">\n                  <MenuGroup title={userObj.displayName}>\n                    <MenuItem\n                      as={RouterLink}\n                      to={`/profile/${userObj.username}`}\n                      icon={<FaRegUserCircle />}\n                    >\n                      Profile\n                    </MenuItem>\n                    <MenuItem icon={<FaCog />}>Settings</MenuItem>\n                  </MenuGroup>\n                  <MenuDivider />\n                  <MenuItem onClick={logout}>Logout</MenuItem>\n                </MenuList>\n              </Menu>\n            )}\n          </HStack>\n        </Flex>\n\n        {isOpen ? (\n          <Box pb={4}>\n            <Stack as={'nav'} spacing={4}>\n              {NavLinkList.map(link => (\n                <NavLink key={link} onClose={onClose}>\n                  {link}\n                </NavLink>\n              ))}\n            </Stack>\n          </Box>\n        ) : null}\n      </Box>\n    </>\n  );\n}\n","import { gql } from '@apollo/client';\n\nexport const FETCH_POSTS_QUERY = gql`\n  query {\n    getPosts {\n      id\n      postType\n      title\n      body\n      liveLink\n      repoLink\n      photoURL\n      createdAt\n      username\n      userPhoto\n      likes {\n        id\n        createdAt\n        userPhoto\n        username\n      }\n      likeCount\n      comments {\n        id\n        createdAt\n        username\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport const SUBMIT_COMMENT_MUTATION = gql`\n  mutation createComment($postId: ID!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        createdAt\n        username\n        body\n        userPhoto\n      }\n      commentCount\n    }\n  }\n`;\n\nexport const LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        createdAt\n        userPhoto\n        username\n      }\n      likeCount\n    }\n  }\n`;\n\nexport const CREATE_POST_MUTATION = gql`\n  mutation createPost(\n    $postType: String!\n    $title: String!\n    $body: String!\n    $liveLink: String!\n    $repoLink: String!\n    $photoURL: String!\n  ) {\n    createPost(\n      postType: $postType\n      title: $title\n      body: $body\n      liveLink: $liveLink\n      repoLink: $repoLink\n      photoURL: $photoURL\n    ) {\n      id\n      postType\n      title\n      body\n      liveLink\n      repoLink\n      photoURL\n      createdAt\n      username\n      userPhoto\n      likes {\n        id\n        createdAt\n        username\n      }\n      likeCount\n      comments {\n        id\n        createdAt\n        username\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport const GET_POSTS_BY_USER = gql`\n  query getPostsByUser($username: String!) {\n    getPostsByUser(username: $username) {\n      id\n      postType\n      title\n      body\n      liveLink\n      repoLink\n      photoURL\n      createdAt\n      username\n      userPhoto\n      likes {\n        id\n        createdAt\n        username\n        userPhoto\n      }\n      likeCount\n      comments {\n        id\n        createdAt\n        username\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport const GET_POST_BY_ID = gql`\n  query getPost($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      postType\n      title\n      body\n      liveLink\n      repoLink\n      photoURL\n      createdAt\n      username\n      userPhoto\n\n      likes {\n        id\n        createdAt\n        username\n        userPhoto\n      }\n      likeCount\n      comments {\n        id\n        createdAt\n        username\n        body\n        userPhoto\n      }\n      commentCount\n    }\n  }\n`;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button, ButtonGroup, IconButton } from '@chakra-ui/button';\nimport { BsHeart, BsHeartFill } from 'react-icons/bs';\nimport { useMutation } from '@apollo/client';\nimport { useEffect, useState } from 'react';\nimport { Menu, MenuButton, MenuItem, MenuList } from '@chakra-ui/menu';\nimport { Image } from '@chakra-ui/image';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { LIKE_POST_MUTATION } from '../util/GQLQueries';\n\nconst LikeButton = ({ user, post: { id, likeCount, likes } }) => {\n  const [liked, setLiked] = useState(false);\n\n  useEffect(() => {\n    console.log({ id, likeCount, likes });\n    if (user && likes.find(like => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, likes]);\n\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\n    variables: { postId: id },\n  });\n\n  return (\n    <ButtonGroup size=\"md\" isAttached variant=\"outline\">\n      <IconButton\n        aria-label=\"Add to friends\"\n        onClick={likePost}\n        icon={\n          liked ? (\n            <BsHeartFill\n              color=\"#E53E3E\"\n              style={{ animation: 'appear 500ms ease' }}\n            />\n          ) : (\n            <BsHeart style={{ animation: 'appear 500ms ease' }} />\n          )\n        }\n      />\n      {likes.length > 0 ? (\n        <Menu>\n          <MenuButton as={Button} mr=\"-px\">\n            {likeCount}\n          </MenuButton>\n          <MenuList>\n            {likes.map(like => (\n              <MenuItem\n                fontSize=\"md\"\n                minH=\"40px\"\n                as={RouterLink}\n                to={`/profile/${like.username}`}\n              >\n                <Image\n                  boxSize=\"2rem\"\n                  borderRadius=\"full\"\n                  objectFit=\"cover\"\n                  src={like.userPhoto}\n                  alt={like.username}\n                  mr=\"12px\"\n                />\n                <span>@{like.username}</span>\n              </MenuItem>\n            ))}\n          </MenuList>\n        </Menu>\n      ) : (\n        <Button mr=\"-px\">{likeCount}</Button>\n      )}\n    </ButtonGroup>\n  );\n};\n\nexport default LikeButton;\n","import gql from 'graphql-tag';\nimport { useMutation } from '@apollo/client';\nimport { useRef } from 'react';\n\nimport { FETCH_POSTS_QUERY } from '../util/GQLQueries';\nimport { Button, IconButton } from '@chakra-ui/button';\nimport { BiTrash } from 'react-icons/bi';\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  AlertDialogCloseButton,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nconst DeleteButton = ({ postId, commentId, callback }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef();\n\n  // const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const [deletePost] = useMutation(DELETE_POST_MUTATION, {\n    update(proxy) {\n      onClose();\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n      const newData = data.getPosts.filter(p => p.id !== postId);\n\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: { getPosts: [...newData] },\n      });\n\n      if (callback) callback();\n    },\n    variables: {\n      postId,\n    },\n  });\n\n  return (\n    <>\n      <IconButton\n        size=\"md\"\n        aria-label=\"Add to friends\"\n        colorScheme=\"red\"\n        icon={<BiTrash />}\n        onClick={onOpen}\n      />\n      <AlertDialog\n        motionPreset=\"slideInBottom\"\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n        isOpen={isOpen}\n        isCentered\n      >\n        <AlertDialogOverlay />\n\n        <AlertDialogContent>\n          <AlertDialogHeader>Delete Post?</AlertDialogHeader>\n          <AlertDialogCloseButton />\n          <AlertDialogBody>\n            Are you sure you want to delete this post? This operation is final.\n          </AlertDialogBody>\n          <AlertDialogFooter>\n            <Button ref={cancelRef} onClick={onClose}>\n              No\n            </Button>\n            <Button colorScheme=\"red\" onClick={deletePost} ml={3}>\n              Yes\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\n// const DELETE_COMMENT_MUTATION = gql`\n// `;\nexport default DeleteButton;\n","import { ArrowForwardIcon } from '@chakra-ui/icons';\nimport {\n  Box,\n  Center,\n  Heading,\n  Text,\n  Stack,\n  Image,\n  Avatar,\n  useColorModeValue,\n  Button,\n  ButtonGroup,\n  IconButton,\n  HStack,\n  Spinner,\n} from '@chakra-ui/react';\nimport { formatDistance } from 'date-fns';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useContext, useState } from 'react';\nimport { FaRegComments } from 'react-icons/fa';\nimport { myContext } from '../Context';\nimport LikeButton from './LikeButton';\n\nimport DeleteButton from './DeleteButton';\n\nexport default function PostCard({ post }) {\n  const [imageReady, setimageReady] = useState(false);\n  const userObj = useContext(myContext);\n\n  return (\n    <>\n      {!imageReady && (\n        <Center h=\"600px\">\n          <Spinner />\n        </Center>\n      )}\n      <Center\n        style={{\n          opacity: imageReady ? '1' : '0',\n          transition: 'opacity 250ms ease-in',\n        }}\n      >\n        <Box\n          maxW={'full'}\n          w={'full'}\n          boxShadow=\"lg\"\n          bg={useColorModeValue('gray.50', 'gray.900')}\n          rounded={'md'}\n          p={6}\n          overflow={'hidden'}\n        >\n          <Box bg={'gray.100'} mt={-6} mx={-6} mb={6} pos={'relative'}>\n            <Image\n              onLoad={() => setimageReady(true)}\n              src={post.photoURL}\n              objectFit=\"cover\"\n            />\n          </Box>\n          <Stack>\n            <Text\n              textTransform={'uppercase'}\n              fontWeight={800}\n              fontSize={'xs'}\n              fontFamily=\"heading\"\n              letterSpacing={1.1}\n            >\n              {post.postType}\n            </Text>\n            <Heading\n              color={useColorModeValue('gray.700', 'white')}\n              fontSize={'xl'}\n            >\n              {post.title}\n            </Heading>\n            <Text color={'gray.500'}>{`${post.body.substring(\n              0,\n              150\n            )}...`}</Text>\n          </Stack>\n          <Stack mt={6} direction={'row'} spacing={4} align={'center'}>\n            <Avatar src={post.userPhoto} alt={'Author'} />\n            <Stack direction={'column'} spacing={0} fontSize={'sm'}>\n              <Text\n                as={RouterLink}\n                to={`/profile/${post.username}`}\n                fontWeight={600}\n                fontSize=\"sm\"\n              >{`@${post.username}`}</Text>\n              <Text color={'gray.500'}>\n                {formatDistance(new Date(post.createdAt), new Date(), {\n                  addSuffix: true,\n                })}\n              </Text>\n            </Stack>\n          </Stack>\n          <Stack\n            mt={6}\n            direction={'row'}\n            justify=\"space-between\"\n            align={'center'}\n          >\n            <HStack>\n              <LikeButton user={userObj} post={post} />\n              <ButtonGroup size=\"md\" isAttached variant=\"outline\">\n                <IconButton\n                  aria-label=\"Add to friends\"\n                  icon={<FaRegComments />}\n                />\n                <Button mr=\"-px\">{post.commentCount}</Button>\n              </ButtonGroup>\n            </HStack>\n            <HStack>\n              {userObj.username === post.username && (\n                <DeleteButton postId={post.id} />\n              )}\n\n              <IconButton\n                as={RouterLink}\n                to={`/post/${post.id}`}\n                size=\"md\"\n                aria-label=\"Add to friends\"\n                icon={<ArrowForwardIcon />}\n              />\n            </HStack>\n          </Stack>\n        </Box>\n      </Center>\n    </>\n  );\n}\n","import { Button } from '@chakra-ui/button';\nimport { Circle } from '@chakra-ui/layout';\nimport { RiQuillPenLine } from 'react-icons/ri';\n\nconst FAB = ({ history }) => {\n  return (\n    <Circle\n      position=\"fixed\"\n      bottom=\"10\"\n      right=\"30px\"\n      size=\"70px\"\n      opacity=\".8\"\n      colorScheme=\"red\"\n      color=\"white\"\n      as={Button}\n      onClick={() => history.push('/create')}\n      _hover={{ opacity: '1', transform: 'scale(1.2)' }}\n    >\n      <RiQuillPenLine size=\"50px\" />\n    </Circle>\n  );\n};\n\nexport default FAB;\n","import { useQuery } from '@apollo/client';\nimport { FETCH_POSTS_QUERY } from '../util/GQLQueries';\nimport { Spinner } from '@chakra-ui/react';\nimport { Center } from '@chakra-ui/layout';\nimport Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';\n\nimport PostCard from '../Components/PostCard';\n\nimport FAB from '../Components/FAB';\n\nconst Feed = ({ history }) => {\n  const { loading, error, data: { getPosts: posts } = {} } = useQuery(\n    FETCH_POSTS_QUERY\n  );\n\n  if (error) return <p>{error}</p>;\n\n  if (loading)\n    return (\n      <Center height=\"90vh\" w=\"100vw\">\n        <Spinner size=\"lg\" />\n      </Center>\n    );\n\n  if (posts) console.log(posts);\n\n  return (\n    <>\n      <ResponsiveMasonry\n        style={{ width: '100%', marginBottom: '80px' }}\n        columnsCountBreakPoints={{ 350: 1, 800: 2, 1100: 3 }}\n      >\n        <Masonry gutter=\"20px\">\n          {posts.map(post => (\n            <PostCard key={post.id} post={post} />\n          ))}\n        </Masonry>\n      </ResponsiveMasonry>\n      <FAB history={history} />\n    </>\n  );\n};\n\nexport default Feed;\n","import imageCompression from 'browser-image-compression';\nimport axios from 'axios';\n\nexport const getImageURl = async file => {\n  const compressedImage = await handleImageCompression(file);\n  const {\n    data: { url },\n  } = await axios.get('http://localhost:4000/s3Url');\n  await fetch(url, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n    body: compressedImage,\n  });\n  return url.split('?')[0];\n};\n\nasync function handleImageCompression(imageFile) {\n  console.log('originalFile instanceof Blob', imageFile instanceof Blob); // true\n  console.log(`originalFile size ${imageFile.size / 1024 / 1024} MB`);\n\n  const options = {\n    maxSizeMB: 0.5,\n    maxWidthOrHeight: 1920,\n    useWebWorker: true,\n  };\n  try {\n    const compressedFile = await imageCompression(imageFile, options);\n    console.log(\n      'compressedFile instanceof Blob',\n      compressedFile instanceof Blob\n    ); // true\n    console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`); // smaller than maxSizeMB\n\n    return compressedFile;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { Button } from '@chakra-ui/button';\nimport { useRef, useState } from 'react';\n\nimport { getImageURl } from '../util/FileUpload';\n\nconst FileUploadButton = ({\n  setFileUrl,\n  width = '',\n  text = 'Upload Profile Picture',\n}) => {\n  const fileInput = useRef(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleFileUpload = async event => {\n    setLoading(true);\n    const file = event.target.files[0];\n    if (file.name) {\n      const imageUrl = await getImageURl(file);\n      await setFileUrl(imageUrl);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <input\n        ref={fileInput}\n        onChange={handleFileUpload}\n        type=\"file\"\n        accept=\"image/*\"\n        style={{ display: 'none' }}\n        multiple={false}\n      />\n\n      <Button\n        w={width}\n        isLoading={loading}\n        onClick={() => fileInput.current.click()}\n      >\n        {text}\n      </Button>\n    </>\n  );\n};\n\nexport default FileUploadButton;\n","import { Avatar } from '@chakra-ui/avatar';\nimport { Flex } from '@chakra-ui/layout';\nimport FileUploadButton from './FileUploadButton';\n\nconst AvatarUpload = ({ fileUrl, setFileUrl }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-around\">\n      <Avatar size=\"lg\" src={fileUrl} />\n      <FileUploadButton setFileUrl={setFileUrl} />\n    </Flex>\n  );\n};\n\nexport default AvatarUpload;\n","import { FaRegUserCircle } from 'react-icons/fa';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { useForm } from '../util/useForm';\nimport { authLogin } from '../util/AuthFunctions';\nimport AvatarUpload from '../Components/AvatarUpload';\n\nconst RegisterForm = () => {\n  const [error, setError] = useState(false);\n  const [passwordErrorText, setPasswordErrorText] = useState('');\n  const [fileUrl, setFileUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const register = async () => {\n    const {\n      registerPassword,\n      confirmPassword,\n      registerUsername,\n      displayName,\n    } = values;\n    if (fileUrl.length < 2) {\n      setError(true);\n      return;\n    }\n    if (registerPassword.length < 6) {\n      setError(true);\n      setPasswordErrorText('Password must be at least 6 characters');\n      return;\n    }\n    if (registerPassword !== confirmPassword) {\n      setError(true);\n      setPasswordErrorText('Passwords must match');\n      return;\n    }\n    setError(false);\n    setPasswordErrorText('');\n    setLoading(true);\n    const res = await axios({\n      method: 'POST',\n      data: {\n        username: registerUsername,\n        password: registerPassword,\n        displayName: displayName,\n        photos: fileUrl,\n      },\n      withCredentials: true,\n      url: 'http://localhost:4000/auth/register',\n    });\n    console.log(res);\n    if (res.data === 'success') {\n      await new Promise(r => setTimeout(r, 500));\n      const loginRes = await authLogin(registerUsername, registerPassword);\n\n      console.log(loginRes);\n      if (loginRes === 'success') {\n        setLoading(false);\n        window.location = '/feed';\n      }\n    }\n    setLoading(false);\n  };\n\n  const { onSubmit, handleChange, values } = useForm(register, {\n    registerUsername: '',\n    displayName: '',\n    registerPassword: '',\n    confirmPassword: '',\n  });\n\n  return (\n    <Flex\n      minH={'92vh'}\n      justify={'center'}\n      bg={useColorModeValue('gray.50', 'gray.800')}\n    >\n      <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n        <Stack align={'center'}>\n          <Heading textAlign=\"center\" fontSize={'4xl'}>\n            Sign up for an account\n          </Heading>\n        </Stack>\n        <Box\n          rounded={'lg'}\n          bg={useColorModeValue('white', 'gray.700')}\n          boxShadow={'lg'}\n          p={6}\n        >\n          <Stack spacing={4}>\n            <AvatarUpload fileUrl={fileUrl} setFileUrl={setFileUrl} />\n            <FormControl isRequired id=\"username\">\n              <FormLabel>Username</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"registerUsername\"\n                value={values.registerUsername}\n                onChange={handleChange}\n              />\n            </FormControl>\n            <FormControl isRequired id=\"displayName\">\n              <FormLabel>Display Name</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"displayName\"\n                value={values.displayName}\n                onChange={handleChange}\n              />\n            </FormControl>\n            <FormControl isRequired isInvalid={error} id=\"password\">\n              <FormLabel>Password</FormLabel>\n              <Input\n                errorBorderColor=\"crimson\"\n                name=\"registerPassword\"\n                value={values.registerPassword}\n                onChange={handleChange}\n                type=\"password\"\n              />\n              <FormHelperText color=\"crimson\">\n                {passwordErrorText}\n              </FormHelperText>\n            </FormControl>\n            <FormControl isInvalid={error} isRequired id=\"confirmPassword\">\n              <FormLabel>Confirm Password</FormLabel>\n              <Input\n                errorBorderColor=\"crimson\"\n                type=\"password\"\n                name=\"confirmPassword\"\n                value={values.confirmPassword}\n                onChange={handleChange}\n              />\n              <FormHelperText color=\"crimson\">\n                {passwordErrorText}\n              </FormHelperText>\n            </FormControl>\n            <Button\n              size=\"lg\"\n              isLoading={loading}\n              leftIcon={<FaRegUserCircle />}\n              onClick={onSubmit}\n            >\n              Register\n            </Button>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default RegisterForm;\n","import { useMutation } from '@apollo/client';\nimport { Button, IconButton } from '@chakra-ui/button';\nimport {\n  FormControl,\n  FormHelperText,\n  FormLabel,\n} from '@chakra-ui/form-control';\nimport { Image } from '@chakra-ui/image';\nimport { Input } from '@chakra-ui/input';\nimport { VStack } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport { useState } from 'react';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport { Link as RouterLink } from 'react-router-dom';\nimport FileUploadButton from '../Components/FileUploadButton';\nimport { FETCH_POSTS_QUERY, CREATE_POST_MUTATION } from '../util/GQLQueries';\nimport { useForm } from '../util/useForm';\n\nconst AddPostForm = ({ history }) => {\n  const [fileURL, setFileURL] = useState('');\n\n  const handleSubmit = () => {\n    createPostCB();\n    if (error) console.log(error);\n    history.push('/feed');\n  };\n\n  const { onSubmit, handleChange, values } = useForm(handleSubmit, {\n    title: '',\n    body: '',\n    liveLink: '',\n    repoLink: '',\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: {\n      postType: 'Project Showcase',\n      title: values.title,\n      body: values.body,\n      liveLink: values.liveLink,\n      repoLink: values.repoLink,\n      photoURL: fileURL,\n    },\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: {\n          getPosts: [result.data.createPost, ...data.getPosts],\n        },\n      });\n      values.body = '';\n    },\n    onError(err) {\n      return err;\n    },\n  });\n  function createPostCB() {\n    createPost();\n  }\n  return (\n    <VStack\n      w=\"full\"\n      spacing=\"24px\"\n      style={{ animation: 'appearSimple 500ms ease' }}\n      maxW=\"container.sm\"\n    >\n      <IconButton\n        alignSelf=\"flex-start\"\n        as={RouterLink}\n        to=\"/feed\"\n        size=\"md\"\n        aria-label=\"Add to friends\"\n        icon={<TiArrowBackOutline />}\n      />\n      <FormControl id=\"title\">\n        <FormLabel>Project Title</FormLabel>\n        <Input\n          name=\"title\"\n          value={values.title}\n          onChange={handleChange}\n          type=\"text\"\n        />\n        <FormHelperText>Give it a catchy name!</FormHelperText>\n      </FormControl>\n\n      <FormControl id=\"title\">\n        <FileUploadButton\n          width=\"full\"\n          text=\"Upload a Picture\"\n          setFileUrl={setFileURL}\n        />\n      </FormControl>\n      <Image rounded={'5'} w=\"full\" src={fileURL} objectFit=\"cover\" />\n      <FormControl id=\"body\">\n        <FormLabel>Project Description</FormLabel>\n        <Textarea\n          name=\"body\"\n          value={values.body}\n          onChange={handleChange}\n          size=\"lg\"\n          rows=\"10\"\n          placeholder=\"Here is a sample placeholder\"\n        />\n      </FormControl>\n\n      <FormControl id=\"title\">\n        <FormLabel>Live Link</FormLabel>\n        <Input\n          name=\"liveLink\"\n          value={values.liveLink}\n          onChange={handleChange}\n          placeholder=\"http://www.yourWebsiteHere.com\"\n          type=\"text\"\n        />\n        <FormHelperText>Give it a catchy name!</FormHelperText>\n      </FormControl>\n      <FormControl id=\"repoLink\">\n        <FormLabel>Github Repo</FormLabel>\n        <Input\n          name=\"repoLink\"\n          value={values.repoLink}\n          onChange={handleChange}\n          placeholder=\"http://www.github.com/yourUsername/yourRepo\"\n          type=\"text\"\n        />\n        <FormHelperText>Give it a catchy name!</FormHelperText>\n      </FormControl>\n      <Button w=\"full\" onClick={onSubmit} colorScheme=\"red\">\n        Publish\n      </Button>\n    </VStack>\n  );\n};\n\nexport default AddPostForm;\n","import {\n  Heading,\n  Avatar,\n  Box,\n  Center,\n  Text,\n  Stack,\n  Button,\n  Badge,\n  useColorModeValue,\n} from '@chakra-ui/react';\n\nexport default function SocialProfileSimple({ username, userPhoto }) {\n  return (\n    <Center>\n      <Box\n        w={'full'}\n        bg={useColorModeValue('gray.50', 'gray.900')}\n        rounded={'lg'}\n        p={6}\n        textAlign={'center'}\n      >\n        <Avatar\n          size={'xl'}\n          src={userPhoto}\n          alt={'Avatar Alt'}\n          mb={4}\n          pos={'relative'}\n          _after={{\n            content: '\"\"',\n            w: 4,\n            h: 4,\n            bg: 'green.300',\n            border: '2px solid white',\n            rounded: 'full',\n            pos: 'absolute',\n            bottom: 0,\n            right: 3,\n          }}\n        />\n        <Heading fontSize={'2xl'} fontFamily={'body'}>\n          {username}\n        </Heading>\n        <Text fontWeight={600} color={'gray.500'} mb={4}>\n          @lindsey_jam3s\n        </Text>\n        <Text\n          textAlign={'center'}\n          color={useColorModeValue('gray.700', 'gray.400')}\n          px={3}\n        >\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quae sit\n          magnam odio esse id praesentium illum nobis alias unde eaque omnis\n          quibusdam voluptate ratione magni itaque quas molestias, ex dolor\n          tempore animi vel commodi?\n        </Text>\n\n        <Stack align={'center'} justify={'center'} direction={'row'} mt={6}>\n          <Badge\n            px={2}\n            py={1}\n            bg={useColorModeValue('gray.50', 'gray.800')}\n            fontWeight={'400'}\n          >\n            #art\n          </Badge>\n          <Badge\n            px={2}\n            py={1}\n            bg={useColorModeValue('gray.50', 'gray.800')}\n            fontWeight={'400'}\n          >\n            #photography\n          </Badge>\n          <Badge\n            px={2}\n            py={1}\n            bg={useColorModeValue('gray.50', 'gray.800')}\n            fontWeight={'400'}\n          >\n            #music\n          </Badge>\n        </Stack>\n\n        <Stack mt={8} direction={'row'} spacing={4}>\n          <Button\n            flex={1}\n            fontSize={'sm'}\n            variant=\"outline\"\n            _focus={{\n              bg: 'gray.200',\n            }}\n          >\n            Message\n          </Button>\n          <Button flex={1} fontSize={'sm'}>\n            Follow\n          </Button>\n        </Stack>\n      </Box>\n    </Center>\n  );\n}\n","import { useQuery } from '@apollo/client';\nimport { Spinner } from '@chakra-ui/react';\nimport { Center } from '@chakra-ui/layout';\nimport Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';\nimport { FETCH_POSTS_QUERY } from '../util/GQLQueries';\nimport PostCard from '../Components/PostCard';\nimport { useParams } from 'react-router-dom';\nimport SocialProfileSimple from '../Components/ProfileCard';\nimport FAB from '../Components/FAB';\n\nconst Profile = ({ history }) => {\n  const { username } = useParams();\n  const { loading, error, data: { getPosts: posts } = {} } = useQuery(\n    FETCH_POSTS_QUERY\n  );\n\n  if (error) return <p>{error}</p>;\n\n  if (loading)\n    return (\n      <Center height=\"90vh\" w=\"100vw\">\n        <Spinner size=\"lg\" />\n      </Center>\n    );\n\n  if (posts) console.log(posts);\n  const filteredPosts = posts.filter(post => post.username === username);\n  return (\n    <>\n      <ResponsiveMasonry\n        style={{ width: '100%', marginBottom: '80px' }}\n        columnsCountBreakPoints={{ 350: 1, 850: 2, 1100: 3 }}\n      >\n        <Masonry gutter=\"20px\">\n          <SocialProfileSimple\n            username={username}\n            userPhoto={filteredPosts[0].userPhoto}\n          />\n          {filteredPosts.map(post => (\n            <PostCard key={post.id} post={post} />\n          ))}\n        </Masonry>\n      </ResponsiveMasonry>\n      <FAB history={history} />\n    </>\n  );\n};\n\nexport default Profile;\n","import { Avatar } from '@chakra-ui/avatar';\nimport { Flex } from '@chakra-ui/layout';\nimport { chakra, useColorModeValue } from '@chakra-ui/system';\nimport { formatDistance } from 'date-fns';\n\nconst Comment = ({ comment }) => {\n  return (\n    <Flex\n      direction={{ base: 'column-reverse', md: 'row' }}\n      width={'full'}\n      rounded={6}\n      p={7}\n      bg={useColorModeValue('gray.50', 'gray.900')}\n      justifyContent={'space-between'}\n      position={'relative'}\n    >\n      <Flex\n        direction={'column'}\n        textAlign={'left'}\n        justifyContent={'space-between'}\n      >\n        <chakra.p fontWeight={'medium'} fontSize={'15px'} pb={2}>\n          {comment.body}\n        </chakra.p>\n        <chakra.p fontWeight={'bold'} fontSize={14}>\n          @{comment.username}\n        </chakra.p>\n        <chakra.p color=\"GrayText\" fontSize={14}>\n          {formatDistance(new Date(comment.createdAt), new Date(), {\n            addSuffix: true,\n          })}\n        </chakra.p>\n      </Flex>\n      <Avatar\n        src={comment.userPhoto}\n        size=\"lg\"\n        alignSelf={'center'}\n        m={{ base: '0 0 35px 0', md: '0 0 0 50px' }}\n      />\n    </Flex>\n  );\n};\n\nexport default Comment;\n","import { useMutation } from '@apollo/client';\nimport { Button } from '@chakra-ui/button';\nimport { FormControl } from '@chakra-ui/form-control';\nimport { Divider, Flex, Heading, VStack } from '@chakra-ui/layout';\nimport { Textarea } from '@chakra-ui/textarea';\nimport { useState } from 'react';\nimport { FiSend } from 'react-icons/fi';\nimport Comment from './Comment';\nimport { SUBMIT_COMMENT_MUTATION } from '../util/GQLQueries';\n\nconst Comments = ({ post }) => {\n  const [comment, setComment] = useState();\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment('');\n    },\n    variables: {\n      postId: post.id,\n      body: comment,\n    },\n  });\n\n  return (\n    <>\n      <Flex w=\"100%\" align=\"center\" justify=\"space-between\">\n        <Heading fontSize=\"2xl\">Comments</Heading>\n      </Flex>\n      <Divider />\n      <FormControl id=\"body\">\n        <Textarea\n          value={comment}\n          onChange={e => setComment(e.target.value)}\n          name=\"body\"\n          size=\"lg\"\n          rows=\"3\"\n          placeholder=\"Here is a sample comment...\"\n        />\n      </FormControl>\n      <Flex w=\"100%\" align=\"center\" justify=\"flex-end\">\n        <Button onClick={submitComment} w=\"full\" mb={4} rightIcon={<FiSend />}>\n          Comment\n        </Button>\n      </Flex>\n      <VStack w=\"full\">\n        {post.comments.map(comment => (\n          <Comment comment={comment} key={comment.id} />\n        ))}\n      </VStack>\n    </>\n  );\n};\n\nexport default Comments;\n","import { useQuery } from '@apollo/client';\nimport { Avatar } from '@chakra-ui/avatar';\nimport { Button, ButtonGroup, IconButton } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/image';\nimport {\n  Center,\n  Container,\n  Divider,\n  Flex,\n  Heading,\n  Text,\n  VStack,\n} from '@chakra-ui/layout';\nimport { Spinner } from '@chakra-ui/spinner';\nimport { useContext, useState } from 'react';\nimport { FaGithub } from 'react-icons/fa';\nimport { CgWebsite } from 'react-icons/cg';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport { useParams, Link as RouterLink } from 'react-router-dom';\nimport Comments from '../Components/Comments';\nimport LikeButton from '../Components/LikeButton';\nimport { myContext } from '../Context';\nimport normalizeUrl from 'normalize-url';\nimport { GET_POST_BY_ID } from '../util/GQLQueries';\n\nconst SinglePostPage = () => {\n  const { postId } = useParams();\n  const userObj = useContext(myContext);\n  const [imageReady, setImageReady] = useState(false);\n  const { loading, error, data: { getPost: post } = {} } = useQuery(\n    GET_POST_BY_ID,\n    {\n      variables: {\n        postId,\n      },\n    }\n  );\n\n  if (error) return <p>{error}</p>;\n\n  if (loading) {\n    return (\n      <Center height=\"90vh\" w=\"100vw\">\n        <Spinner size=\"lg\" />\n      </Center>\n    );\n  }\n\n  if (post) console.log(post);\n\n  const navigate = url => {\n    window.open(normalizeUrl(url), '_blank');\n  };\n\n  return (\n    <>\n      {!imageReady && (\n        <Center h=\"600px\">\n          <Spinner />\n        </Center>\n      )}\n      <Container\n        style={{\n          opacity: imageReady ? '1' : '0',\n          transition: 'opacity 250ms ease-in',\n        }}\n        maxW=\"container.md\"\n      >\n        <VStack spacing={4}>\n          <VStack w=\"100%\">\n            <Flex w=\"100%\" align=\"center\" justify=\"space-between\">\n              <Heading fontSize=\"md\">{post.postType}</Heading>\n              <Flex>\n                <LikeButton post={post} user={userObj} />\n                <IconButton\n                  ml=\"2\"\n                  as={RouterLink}\n                  to=\"/feed\"\n                  size=\"md\"\n                  aria-label=\"Add to friends\"\n                  icon={<TiArrowBackOutline />}\n                />\n              </Flex>\n            </Flex>\n            <Flex w=\"100%\" justify=\"space-between\">\n              <Heading fontSize=\"3xl\">{post.title}</Heading>\n            </Flex>\n            <Flex w=\"100%\" h=\"50px\" justify=\"flex-start\" align=\"center\">\n              <Avatar size=\"sm\" src={post.userPhoto} mr={4} />\n              <Heading justify=\"left\" fontFamily=\"body\" fontSize=\"md\">\n                By: {post.username}\n              </Heading>\n            </Flex>\n            <Divider />\n          </VStack>\n          <Image\n            src={post.photoURL}\n            rounded={8}\n            onLoad={() => setImageReady(true)}\n          />\n          <ButtonGroup w=\"full\" size=\"sm\" isAttached variant=\"outline\">\n            <Button\n              size=\"lg\"\n              w=\"full\"\n              onClick={() => navigate(post.repoLink)}\n              leftIcon={<FaGithub />}\n            >\n              Github Repo Link\n            </Button>\n            <Button\n              size=\"lg\"\n              onClick={() => navigate(post.liveLink)}\n              w=\"full\"\n              leftIcon={<CgWebsite />}\n            >\n              Live Website Link\n            </Button>\n          </ButtonGroup>\n          <Text fontSize=\"lg\" fontFamily=\"body\">\n            {post.body}\n          </Text>\n          <Flex w=\"100%\" justify=\"flex-start\" align=\"center\"></Flex>\n          <Comments post={post} />\n        </VStack>\n      </Container>\n    </>\n  );\n};\n\nexport default SinglePostPage;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import React, { useContext } from 'react';\nimport { Box, ChakraProvider, Container } from '@chakra-ui/react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { myContext } from './Context';\nimport { theme } from './Theme';\nimport Homepage from './Pages/Homepage';\nimport LoginForm from './Pages/LoginForm';\nimport Nav from './Components/Nav';\nimport Feed from './Pages/Feed';\nimport RegisterForm from './Pages/RegisterForm';\nimport AddPostForm from './Pages/AddPostForm';\nimport Profile from './Pages/Profile';\nimport SinglePostPage from './Pages/SinglePostPage';\nimport ScrollToTop from './Components/ScrollToTop';\nfunction App() {\n  const userObj = useContext(myContext);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Router>\n        <ScrollToTop />\n        <Nav />\n        <Container centerContent mb={14} maxW={'container.xl'}>\n          <Box h=\"100px\" />\n          <Route exact path=\"/\">\n            {userObj ? <Redirect to=\"/feed\" /> : <Homepage />}\n          </Route>\n          {userObj ? (\n            <Redirect to=\"/feed\" />\n          ) : (\n            <Route exact path=\"/login\" component={LoginForm} />\n          )}\n          {userObj ? (\n            <Redirect to=\"/feed\" />\n          ) : (\n            <Route exact path=\"/register\" component={RegisterForm} />\n          )}\n          {userObj ? <Route exact path=\"/feed\" component={Feed} /> : null}\n          {userObj ? (\n            <Route exact path=\"/create\" component={AddPostForm} />\n          ) : (\n            <Redirect to=\"/\" />\n          )}\n          {userObj ? (\n            <Route exact path=\"/profile/:username\" component={Profile} />\n          ) : (\n            <Redirect to=\"/\" />\n          )}\n          <Route exact path=\"/post/:postId\" component={SinglePostPage} />\n        </Container>\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import './index.css';\nimport { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Context from './Context';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000/graphql',\n  credentials: 'include',\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <StrictMode>\n    <ApolloProvider client={client}>\n      <Context>\n        <ColorModeScript />\n        <App />\n      </Context>\n    </ApolloProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}